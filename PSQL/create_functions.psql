/* Description:
 * Sampled Projection: Get a list of patients seen by a specified doctor on a specified date.
 */
CREATE OR REPLACE FUNCTION get_patients_by_doctor_and_date(doctor_id INT, appointment_date DATE) 
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(50),
    surname VARCHAR(50),
    middle_name VARCHAR(50),
    email custom_email
) AS $$
BEGIN
    RETURN QUERY
    SELECT u.id, u.name, u.surname, u.middle_name, u.email
    FROM users u
    JOIN booked_doctors bd ON u.id = bd.patient_id
    JOIN users_roles ur ON bd.doctor_id = ur.user_id
    JOIN roles r ON ur.role_id = r.id
    WHERE r.name = 'doctor'
      AND bd.doctor_id = get_patients_by_doctor_and_date.doctor_id
      AND DATE(bd.appointment_time) = get_patients_by_doctor_and_date.appointment_date;
END;
$$ LANGUAGE plpgsql;

/* Description:
 * Get a list of doctors ranked by the number of patients admitted in the last month.
 */
CREATE OR REPLACE FUNCTION get_top_doctors_last_month() 
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(50),
    surname VARCHAR(50),
    middle_name VARCHAR(50),
    email custom_email,
    clients_count BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM get_patient_count_per_doctor_last_month() AS bd
    ORDER BY bd.clients_count DESC;
END;
$$ LANGUAGE plpgsql;




/* Description:
 * Get a list of patients who have been prescribed medications from the heart disease category.
 */
CREATE OR REPLACE FUNCTION get_patients_with_heart_disease_drugs() 
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(50),
    surname VARCHAR(50),
    middle_name VARCHAR(50),
    email custom_email
) AS $$
BEGIN
    RETURN QUERY
    SELECT DISTINCT u.id, u.name, u.surname, u.middle_name, u.email
    FROM users u
    JOIN booked_doctors bd ON u.id = bd.patient_id
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    JOIN prescription_drugs pd ON da.id = pd.doctor_appointment_id
    JOIN drugs d ON pd.drug_id = d.id
    WHERE LOWER(d.description) LIKE '%серд%';
END;
$$ LANGUAGE plpgsql;


/* Description:
 * Count the number of patients each physician has seen per appointment during the last month.
 */
CREATE OR REPLACE FUNCTION get_patient_count_per_doctor_last_month()
RETURNS TABLE (
    id BIGINT,
    name VARCHAR(50),
    surname VARCHAR(50),
    middle_name VARCHAR(50),
    email custom_email,
    clients_count BIGINT
) AS $$
DECLARE
    last_month_start DATE := date_trunc('month', CURRENT_DATE) - interval '1 month';
    last_month_end DATE := date_trunc('month', CURRENT_DATE);
BEGIN
    RETURN QUERY
    SELECT u.id, u.name, u.surname, u.middle_name, u.email, COUNT(bd.patient_id) AS patients_count
    FROM users u
    JOIN booked_doctors bd ON u.id = bd.doctor_id
    WHERE bd.appointment_time >= last_month_start
    AND bd.appointment_time < last_month_end
    GROUP BY u.id;
END;
$$ LANGUAGE plpgsql;

/* Description:
 * Merge: Give a total list of medications and tests that have been prescribed for the specified 
 * patient in the last six months, without repeats, with status.
 */
CREATE OR REPLACE FUNCTION get_medications_and_tests_for_patient(patient_id BIGINT)
    RETURNS TABLE
            (
                name varchar(128),
                type varchar(20)
            )
AS
$$
BEGIN
    RETURN QUERY
        -- Список анализов и лекарств которые были выписаны определенному пациенту за последние 6 месяцев
        (
            SELECT CAST(analyses.name AS varchar(128)) AS name, CAST('Анализы' AS varchar(20)) AS type
            FROM users
                     INNER JOIN booked_doctors ON booked_doctors.patient_id = users.id
                     INNER JOIN doctor_appointments ON doctor_appointments.booked_doctor_id = booked_doctors.id
                     INNER JOIN analyse_appointments ON analyse_appointments.doctor_appointment_id = doctor_appointments.id
                     INNER JOIN analyses ON analyses.id = analyse_appointments.analyse_id
            WHERE users.id = get_medications_and_tests_for_patient.patient_id
              AND booked_doctors.appointment_time >= CURRENT_DATE - INTERVAL '6 months'
            UNION
            SELECT CAST(drugs.name AS varchar(128)) AS name, CAST('Лекарства' AS varchar(20)) AS type
            FROM users
                     INNER JOIN booked_doctors ON booked_doctors.patient_id = users.id
                     INNER JOIN doctor_appointments ON doctor_appointments.booked_doctor_id = booked_doctors.id
                     INNER JOIN prescription_drugs ON prescription_drugs.doctor_appointment_id = doctor_appointments.id
                     INNER JOIN drugs ON drugs.id = prescription_drugs.drug_id
            WHERE users.id = get_medications_and_tests_for_patient.patient_id
              AND booked_doctors.appointment_time >= CURRENT_DATE - INTERVAL '6 months'
        );
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION check_user_login(user_email TEXT, user_password TEXT) RETURNS BOOLEAN AS $$
DECLARE
    stored_password TEXT;
BEGIN
    -- Извлечение пароля из таблицы паролей
    SELECT p.pass INTO stored_password
    FROM users u
    JOIN passwords p ON u.id = p.user_id
    WHERE u.email = user_email;
    
    -- Если пользователь не найден, вернуть false
    IF NOT FOUND THEN
        RETURN FALSE;
    END IF;
    
    -- Проверка пароля
    IF stored_password = user_password THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_last_appointments_by_surname(patient_surname VARCHAR(50))
RETURNS TABLE (
    doctor_name TEXT,
    appointment_time TIMESTAMPTZ,
    complaint VARCHAR(2048)
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        CONCAT(d.name, ' ', d.surname) AS doctor_name,
        bd.appointment_time,
        da.complaint
    FROM 
        users p
        JOIN booked_doctors bd ON p.id = bd.patient_id
        JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
        JOIN users d ON bd.doctor_id = d.id
    WHERE 
        p.surname = patient_surname
    ORDER BY 
        bd.appointment_time DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_clinic_statistics(start_date DATE, end_date DATE)
RETURNS TABLE (
    total_patients INT,
    infectious_diseases INT,
    hypertension INT,
    diabetes INT,
    lung_diseases INT,
    total_sick_leaves INT,
    total_sick_leave_days INT
) AS $$
DECLARE
    total_patients_count INT;
    infectious_diseases_count INT;
    hypertension_count INT;
    diabetes_count INT;
    lung_diseases_count INT;
    total_sick_leaves_count INT;
    total_sick_leave_days_count INT;
BEGIN
    -- Подсчет общего количества пациентов
    SELECT COUNT(DISTINCT bd.patient_id)
    INTO total_patients_count
    FROM booked_doctors bd
    WHERE bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет количества пациентов с инфекционными заболеваниями
    SELECT COUNT(DISTINCT bd.patient_id)
    INTO infectious_diseases_count
    FROM booked_doctors bd
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    WHERE da.complaint ILIKE '%infection%'
    AND bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет количества пациентов с гипертонией
    SELECT COUNT(DISTINCT bd.patient_id)
    INTO hypertension_count
    FROM booked_doctors bd
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    WHERE da.complaint ILIKE '%hypertension%'
    AND bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет количества пациентов с диабетом
    SELECT COUNT(DISTINCT bd.patient_id)
    INTO diabetes_count
    FROM booked_doctors bd
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    WHERE da.complaint ILIKE '%diabetes%'
    AND bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет количества пациентов с заболеваниями легких
    SELECT COUNT(DISTINCT bd.patient_id)
    INTO lung_diseases_count
    FROM booked_doctors bd
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    WHERE da.complaint ILIKE '%lung%'
    AND bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет общего количества выданных больничных
    SELECT COUNT(*)
    INTO total_sick_leaves_count
    FROM patient_sick_leave psl
    JOIN doctor_appointments da ON psl.doctor_appointment_id = da.id
    JOIN booked_doctors bd ON da.booked_doctor_id = bd.id
    WHERE bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    -- Подсчет общего количества дней больничных
    SELECT SUM(psl.end_date - psl.start_date)
    INTO total_sick_leave_days_count
    FROM patient_sick_leave psl
    JOIN doctor_appointments da ON psl.doctor_appointment_id = da.id
    JOIN booked_doctors bd ON da.booked_doctor_id = bd.id
    WHERE bd.appointment_time BETWEEN get_clinic_statistics.start_date AND get_clinic_statistics.end_date;

    RETURN QUERY SELECT
        COALESCE(total_patients_count, 0),
        COALESCE(infectious_diseases_count, 0),
        COALESCE(hypertension_count, 0),
        COALESCE(diabetes_count, 0),
        COALESCE(lung_diseases_count, 0),
        COALESCE(total_sick_leaves_count, 0),
        COALESCE(total_sick_leave_days_count, 0);
END;
$$ LANGUAGE plpgsql;


-- Создание функции триггера для проверки аллергенов
CREATE OR REPLACE FUNCTION check_allergens() RETURNS TRIGGER AS $$
DECLARE
    patient_id BIGINT;
    patient_allergens TEXT[];
    allergen TEXT;
    drug_description TEXT;
BEGIN
    -- Получение ID пациента
    SELECT bd.patient_id INTO patient_id
    FROM booked_doctors bd
    JOIN doctor_appointments da ON bd.id = da.booked_doctor_id
    WHERE da.id = NEW.doctor_appointment_id;

    -- Получение описания лекарства
    SELECT description INTO drug_description
    FROM drugs
    WHERE id = NEW.drug_id;
    
    -- Получение аллергенов пациента в виде массива
    SELECT ARRAY_AGG(a.name)
    INTO patient_allergens
    FROM users_allergen ua
    JOIN allergens a ON ua.allergen_id = a.id
    WHERE ua.user_id = patient_id;

    -- Проверка на наличие аллергенов в описании лекарства
    IF patient_allergens IS NOT NULL THEN
        FOR i IN ARRAY_LOWER(patient_allergens, 1) .. ARRAY_UPPER(patient_allergens, 1) LOOP
            allergen := patient_allergens[i];
            -- Отладочное сообщение для проверки значений
            RAISE NOTICE 'Checking allergen: % in drug description: %', allergen, drug_description;
            IF position(lower(allergen) IN lower(drug_description)) > 0 THEN
                RAISE EXCEPTION 'Cannot prescribe drug with allergen %', allergen;
            END IF;
        END LOOP;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION add_new_user(
    p_name VARCHAR(50),
    p_surname VARCHAR(50),
    p_middle_name VARCHAR(50),
    p_email custom_email,
    p_password TEXT,
    p_role_id INTEGER
) RETURNS TABLE (
    is_success BOOLEAN,
    message TEXT
) AS $$
DECLARE
    new_user_id BIGINT;
    role_exists BOOLEAN;
BEGIN
    -- Проверка существования роли
    SELECT EXISTS (SELECT 1 FROM roles WHERE id = p_role_id) INTO role_exists;
    
    IF NOT role_exists THEN
        RETURN QUERY SELECT FALSE, 'Role with ID ' || p_role_id || ' does not exist';
        RETURN;
    END IF;

    -- Вставка нового пользователя в таблицу users
    BEGIN
        INSERT INTO users (name, surname, middle_name, email)
        VALUES (p_name, p_surname, p_middle_name, p_email)
        RETURNING id INTO new_user_id;
    EXCEPTION WHEN others THEN
        RETURN QUERY SELECT FALSE, 'Failed to insert user into users table: ' || SQLERRM;
        RETURN;
    END;

    -- Вставка пароля пользователя в таблицу passwords
    BEGIN
        INSERT INTO passwords (user_id, pass)
        VALUES (new_user_id, p_password);
    EXCEPTION WHEN others THEN
        RETURN QUERY SELECT FALSE, 'Failed to insert password into passwords table: ' || SQLERRM;
        RETURN;
    END;

    -- Назначение роли пользователю
    BEGIN
        INSERT INTO users_roles (user_id, role_id)
        VALUES (new_user_id, p_role_id);
    EXCEPTION WHEN others THEN
        RETURN QUERY SELECT FALSE, 'Failed to insert role into users_roles table: ' || SQLERRM;
        RETURN;
    END;

    RETURN QUERY SELECT TRUE, 'User added successfully';
END;
$$ LANGUAGE plpgsql;

SELECT * FROM get_patients_by_doctor_and_date(8, '2024-05-10');
SELECT * FROM get_top_doctors_last_month();
SELECT * FROM get_patients_with_heart_disease_drugs();
SELECT * FROM get_patient_count_per_doctor_last_month();
SELECT * FROM get_medications_and_tests_for_patient(5);
SELECT * FROM check_user_login('ivan.ivanov1@example.com', '123456');
SELECT * FROM get_last_appointments_by_surname('Павлов');
SELECT * FROM get_clinic_statistics('2024-01-01', '2024-12-31');

SELECT * FROM add_new_user(
    'Іван',
    'Іванов',
    'Іванович',
    'ivan.ivanov@example.com',
    'password123',
    1 -- ID роли
);
